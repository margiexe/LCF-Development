{"ast":null,"code":"import _defineProperty from \"C:/Users/Asus/Desktop/LCF-Deployment/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/Asus/Desktop/LCF-Deployment/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n      defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$attribute = options.attribute,\n      defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n      _options$modeStorageK = options.modeStorageKey,\n      defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n      _options$colorSchemeS = options.colorSchemeStorageKey,\n      defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n      _options$defaultMode = options.defaultMode,\n      designSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      resolveTheme = options.resolveTheme,\n      excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? defaultModeStorageKey : _ref$modeStorageKey,\n        _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n        colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? defaultColorSchemeStorageKey : _ref$colorSchemeStora,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? defaultAttribute : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? designSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n        _ref$disableTransitio = _ref.disableTransitionOnChange,\n        disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n        _ref$storageWindow = _ref.storageWindow,\n        storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n        _ref$documentNode = _ref.documentNode,\n        documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n        _ref$colorSchemeNode = _ref.colorSchemeNode,\n        colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n        _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n        colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec,\n        _ref$disableNestedCon = _ref.disableNestedContext,\n        disableNestedContext = _ref$disableNestedCon === void 0 ? false : _ref$disableNestedCon,\n        _ref$disableStyleShee = _ref.disableStyleSheetGeneration,\n        disableStyleSheetGeneration = _ref$disableStyleShee === void 0 ? false : _ref$disableStyleShee;\n    var hasMounted = React.useRef(false);\n    var upperTheme = muiUseTheme();\n    var ctx = React.useContext(ColorSchemeContext);\n    var nested = !!ctx && !disableNestedContext;\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        _themeProp$components = themeProp.components,\n        components = _themeProp$components === void 0 ? {} : _themeProp$components,\n        _themeProp$generateCs = themeProp.generateCssVars,\n        generateCssVars = _themeProp$generateCs === void 0 ? function () {\n      return {\n        vars: {},\n        css: {}\n      };\n    } : _themeProp$generateCs,\n        cssVarPrefix = themeProp.cssVarPrefix,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      colorSchemeStorageKey: colorSchemeStorageKey,\n      defaultMode: defaultMode,\n      storageWindow: storageWindow\n    }),\n        stateMode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        stateColorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var mode = stateMode;\n    var colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    var calculatedMode = function () {\n      if (mode) {\n        return mode;\n      } // This scope occurs on the server\n\n\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n\n      return defaultMode;\n    }();\n\n    var calculatedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    var _generateCssVars = generateCssVars(),\n        rootCss = _generateCssVars.css,\n        rootVars = _generateCssVars.vars; // 3. Start composing the theme object\n\n\n    var theme = _extends({}, restThemeProp, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _generateCssVars2 = generateCssVars(key),\n          css = _generateCssVars2.css,\n          vars = _generateCssVars2.vars;\n\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(function (schemeKey) {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    var contextValue = React.useMemo(function () {\n      return {\n        mode: mode,\n        systemMode: systemMode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      };\n    }, [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    var shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    var element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: _defineProperty({}, colorSchemeSelector, rootCss)\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\n    attribute: PropTypes.string,\n\n    /**\r\n     * The component tree.\r\n     */\n    children: PropTypes.node,\n\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\r\n     * The initial color scheme used.\r\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\r\n     * The initial mode used.\r\n     */\n    defaultMode: PropTypes.string,\n\n    /**\r\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\r\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\r\n     * If `true`, the style sheet won't be generated.\r\n     *\r\n     * This is useful for controlling nested CssVarsProvider behavior.\r\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\r\n     * The document to attach the attribute to\r\n     */\n    documentNode: PropTypes.any,\n\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\n    storageWindow: PropTypes.any,\n\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  var defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultMode: designSystemMode,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","components","generateCssVars","vars","css","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","stateMode","mode","setMode","systemMode","lightColorScheme","darkColorScheme","stateColorScheme","colorScheme","setColorScheme","calculatedMode","calculatedColorScheme","rootCss","rootVars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"sources":["C:/Users/Asus/Desktop/LCF-Deployment/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { deepmerge } from '@mui/utils';\r\nimport { GlobalStyles } from '@mui/styled-engine';\r\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\r\nimport ThemeProvider from '../ThemeProvider';\r\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\r\nimport useCurrentColorScheme from './useCurrentColorScheme';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\r\nexport default function createCssVarsProvider(options) {\r\n  const {\r\n    theme: defaultTheme = {},\r\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\r\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\r\n    defaultMode: designSystemMode = 'light',\r\n    defaultColorScheme: designSystemColorScheme,\r\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\r\n    resolveTheme,\r\n    excludeVariablesFromRoot\r\n  } = options;\r\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\r\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\r\n  }\r\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\r\n  const useColorScheme = () => {\r\n    const value = React.useContext(ColorSchemeContext);\r\n    if (!value) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\r\n    }\r\n    return value;\r\n  };\r\n  function CssVarsProvider({\r\n    children,\r\n    theme: themeProp = defaultTheme,\r\n    modeStorageKey = defaultModeStorageKey,\r\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\r\n    attribute = defaultAttribute,\r\n    defaultMode = designSystemMode,\r\n    defaultColorScheme = designSystemColorScheme,\r\n    disableTransitionOnChange = designSystemTransitionOnChange,\r\n    storageWindow = typeof window === 'undefined' ? undefined : window,\r\n    documentNode = typeof document === 'undefined' ? undefined : document,\r\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\r\n    colorSchemeSelector = ':root',\r\n    disableNestedContext = false,\r\n    disableStyleSheetGeneration = false\r\n  }) {\r\n    const hasMounted = React.useRef(false);\r\n    const upperTheme = muiUseTheme();\r\n    const ctx = React.useContext(ColorSchemeContext);\r\n    const nested = !!ctx && !disableNestedContext;\r\n    const {\r\n        colorSchemes = {},\r\n        components = {},\r\n        generateCssVars = () => ({\r\n          vars: {},\r\n          css: {}\r\n        }),\r\n        cssVarPrefix\r\n      } = themeProp,\r\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\r\n    const allColorSchemes = Object.keys(colorSchemes);\r\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\r\n\r\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\r\n    const {\r\n      mode: stateMode,\r\n      setMode,\r\n      systemMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme: stateColorScheme,\r\n      setColorScheme\r\n    } = useCurrentColorScheme({\r\n      supportedColorSchemes: allColorSchemes,\r\n      defaultLightColorScheme,\r\n      defaultDarkColorScheme,\r\n      modeStorageKey,\r\n      colorSchemeStorageKey,\r\n      defaultMode,\r\n      storageWindow\r\n    });\r\n    let mode = stateMode;\r\n    let colorScheme = stateColorScheme;\r\n    if (nested) {\r\n      mode = ctx.mode;\r\n      colorScheme = ctx.colorScheme;\r\n    }\r\n    const calculatedMode = (() => {\r\n      if (mode) {\r\n        return mode;\r\n      }\r\n      // This scope occurs on the server\r\n      if (defaultMode === 'system') {\r\n        return designSystemMode;\r\n      }\r\n      return defaultMode;\r\n    })();\r\n    const calculatedColorScheme = (() => {\r\n      if (!colorScheme) {\r\n        // This scope occurs on the server\r\n        if (calculatedMode === 'dark') {\r\n          return defaultDarkColorScheme;\r\n        }\r\n        // use light color scheme, if default mode is 'light' | 'system'\r\n        return defaultLightColorScheme;\r\n      }\r\n      return colorScheme;\r\n    })();\r\n\r\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n    const {\r\n      css: rootCss,\r\n      vars: rootVars\r\n    } = generateCssVars();\r\n\r\n    // 3. Start composing the theme object\r\n    const theme = _extends({}, restThemeProp, {\r\n      components,\r\n      colorSchemes,\r\n      cssVarPrefix,\r\n      vars: rootVars,\r\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\r\n    });\r\n\r\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\r\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\r\n    const defaultColorSchemeStyleSheet = {};\r\n    const otherColorSchemesStyleSheet = {};\r\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\r\n      const {\r\n        css,\r\n        vars\r\n      } = generateCssVars(key);\r\n      theme.vars = deepmerge(theme.vars, vars);\r\n      if (key === calculatedColorScheme) {\r\n        // 4.1 Merge the selected color scheme to the theme\r\n        Object.keys(scheme).forEach(schemeKey => {\r\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\r\n            // shallow merge the 1st level structure of the theme.\r\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\r\n          } else {\r\n            theme[schemeKey] = scheme[schemeKey];\r\n          }\r\n        });\r\n        if (theme.palette) {\r\n          theme.palette.colorScheme = key;\r\n        }\r\n      }\r\n      const resolvedDefaultColorScheme = (() => {\r\n        if (typeof defaultColorScheme === 'string') {\r\n          return defaultColorScheme;\r\n        }\r\n        if (defaultMode === 'dark') {\r\n          return defaultColorScheme.dark;\r\n        }\r\n        return defaultColorScheme.light;\r\n      })();\r\n      if (key === resolvedDefaultColorScheme) {\r\n        if (excludeVariablesFromRoot) {\r\n          const excludedVariables = {};\r\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\r\n            excludedVariables[cssVar] = css[cssVar];\r\n            delete css[cssVar];\r\n          });\r\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\r\n        }\r\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\r\n      } else {\r\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\r\n      }\r\n    });\r\n    theme.vars = deepmerge(theme.vars, rootVars);\r\n\r\n    // 5. Declaring effects\r\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\r\n    React.useEffect(() => {\r\n      if (colorScheme && colorSchemeNode) {\r\n        // attaches attribute to <html> because the css variables are attached to :root (html)\r\n        colorSchemeNode.setAttribute(attribute, colorScheme);\r\n      }\r\n    }, [colorScheme, attribute, colorSchemeNode]);\r\n\r\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\r\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\r\n    React.useEffect(() => {\r\n      let timer;\r\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\r\n        const css = documentNode.createElement('style');\r\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\r\n        documentNode.head.appendChild(css);\r\n\r\n        // Force browser repaint\r\n        (() => window.getComputedStyle(documentNode.body))();\r\n        timer = setTimeout(() => {\r\n          documentNode.head.removeChild(css);\r\n        }, 1);\r\n      }\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\r\n    React.useEffect(() => {\r\n      hasMounted.current = true;\r\n      return () => {\r\n        hasMounted.current = false;\r\n      };\r\n    }, []);\r\n    const contextValue = React.useMemo(() => ({\r\n      mode,\r\n      systemMode,\r\n      setMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme,\r\n      allColorSchemes\r\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\r\n    let shouldGenerateStyleSheet = true;\r\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\r\n      shouldGenerateStyleSheet = false;\r\n    }\r\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\r\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\r\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\r\n          styles: {\r\n            [colorSchemeSelector]: rootCss\r\n          }\r\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n          styles: defaultColorSchemeStyleSheet\r\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n          styles: otherColorSchemesStyleSheet\r\n        })]\r\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\r\n        theme: resolveTheme ? resolveTheme(theme) : theme,\r\n        children: children\r\n      })]\r\n    });\r\n    if (nested) {\r\n      return element;\r\n    }\r\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\r\n      value: contextValue,\r\n      children: element\r\n    });\r\n  }\r\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\r\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\r\n    attribute: PropTypes.string,\r\n    /**\r\n     * The component tree.\r\n     */\r\n    children: PropTypes.node,\r\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\r\n    colorSchemeNode: PropTypes.any,\r\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\r\n    colorSchemeSelector: PropTypes.string,\r\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\r\n    colorSchemeStorageKey: PropTypes.string,\r\n    /**\r\n     * The initial color scheme used.\r\n     */\r\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    /**\r\n     * The initial mode used.\r\n     */\r\n    defaultMode: PropTypes.string,\r\n    /**\r\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\r\n     */\r\n    disableNestedContext: PropTypes.bool,\r\n    /**\r\n     * If `true`, the style sheet won't be generated.\r\n     *\r\n     * This is useful for controlling nested CssVarsProvider behavior.\r\n     */\r\n    disableStyleSheetGeneration: PropTypes.bool,\r\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\r\n    disableTransitionOnChange: PropTypes.bool,\r\n    /**\r\n     * The document to attach the attribute to\r\n     */\r\n    documentNode: PropTypes.any,\r\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\r\n    modeStorageKey: PropTypes.string,\r\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\r\n    storageWindow: PropTypes.any,\r\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\r\n    theme: PropTypes.object\r\n  } : void 0;\r\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\r\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\r\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\r\n    attribute: defaultAttribute,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\r\n    defaultMode: designSystemMode,\r\n    defaultLightColorScheme,\r\n    defaultDarkColorScheme,\r\n    modeStorageKey: defaultModeStorageKey\r\n  }, params));\r\n  return {\r\n    CssVarsProvider,\r\n    useColorScheme,\r\n    getInitColorSchemeScript\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}