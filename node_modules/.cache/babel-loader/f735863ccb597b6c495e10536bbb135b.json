{"ast":null,"code":"import _slicedToArray from \"C:/Users/Asus/Desktop/LCF-Deployment/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n/**\r\n * Portals provide a first-class way to render children into a DOM node\r\n * that exists outside the DOM hierarchy of the parent component.\r\n *\r\n * Demos:\r\n *\r\n * - [Portal](https://mui.com/base/react-portal/)\r\n *\r\n * API:\r\n *\r\n * - [Portal API](https://mui.com/base/api/portal/)\r\n */\n\n\nvar Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  var children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      mountNode = _React$useState2[0],\n      setMountNode = _React$useState2[1]; // @ts-expect-error TODO upstream fix\n\n\n  var handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(function () {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(function () {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return function () {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      var newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/React.cloneElement(children, newProps);\n    }\n\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The children to render into the `container`.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * An HTML element or function that returns one.\r\n   * The `container` will have the portal children appended to it.\r\n   *\r\n   * By default, it uses the body of the top-level document object,\r\n   * so it's simply `document.body` most of the time.\r\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\r\n   * The `children` will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;","map":{"version":3,"names":["React","ReactDOM","PropTypes","exactProp","HTMLElementType","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useForkRef","useForkRef","unstable_setRef","setRef","jsx","_jsx","getContainer","container","Portal","forwardRef","props","ref","children","disablePortal","useState","mountNode","setMountNode","handleRef","isValidElement","document","body","undefined","newProps","cloneElement","Fragment","createPortal","process","env","NODE_ENV","propTypes","node","oneOfType","func","bool"],"sources":["C:/Users/Asus/Desktop/LCF-Deployment/node_modules/@mui/base/Portal/Portal.js"],"sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction getContainer(container) {\r\n  return typeof container === 'function' ? container() : container;\r\n}\r\n\r\n/**\r\n * Portals provide a first-class way to render children into a DOM node\r\n * that exists outside the DOM hierarchy of the parent component.\r\n *\r\n * Demos:\r\n *\r\n * - [Portal](https://mui.com/base/react-portal/)\r\n *\r\n * API:\r\n *\r\n * - [Portal API](https://mui.com/base/api/portal/)\r\n */\r\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\r\n  const {\r\n    children,\r\n    container,\r\n    disablePortal = false\r\n  } = props;\r\n  const [mountNode, setMountNode] = React.useState(null);\r\n  // @ts-expect-error TODO upstream fix\r\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\r\n  useEnhancedEffect(() => {\r\n    if (!disablePortal) {\r\n      setMountNode(getContainer(container) || document.body);\r\n    }\r\n  }, [container, disablePortal]);\r\n  useEnhancedEffect(() => {\r\n    if (mountNode && !disablePortal) {\r\n      setRef(ref, mountNode);\r\n      return () => {\r\n        setRef(ref, null);\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [ref, mountNode, disablePortal]);\r\n  if (disablePortal) {\r\n    if ( /*#__PURE__*/React.isValidElement(children)) {\r\n      const newProps = {\r\n        ref: handleRef\r\n      };\r\n      return /*#__PURE__*/React.cloneElement(children, newProps);\r\n    }\r\n    return /*#__PURE__*/_jsx(React.Fragment, {\r\n      children: children\r\n    });\r\n  }\r\n  return /*#__PURE__*/_jsx(React.Fragment, {\r\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * The children to render into the `container`.\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * An HTML element or function that returns one.\r\n   * The `container` will have the portal children appended to it.\r\n   *\r\n   * By default, it uses the body of the top-level document object,\r\n   * so it's simply `document.body` most of the time.\r\n   */\r\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\r\n  /**\r\n   * The `children` will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\r\n  disablePortal: PropTypes.bool\r\n} : void 0;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // eslint-disable-next-line\r\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\r\n}\r\nexport default Portal;"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,0BAA0B,IAAIC,iBAAnE,EAAsFC,mBAAmB,IAAIC,UAA7G,EAAyHC,eAAe,IAAIC,MAA5I,QAA0J,YAA1J;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;EAC/B,OAAO,OAAOA,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SAAvD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,MAAM,GAAG,aAAaf,KAAK,CAACgB,UAAN,CAAiB,SAASD,MAAT,CAAgBE,KAAhB,EAAuBC,GAAvB,EAA4B;EACvE,IACEC,QADF,GAIIF,KAJJ,CACEE,QADF;EAAA,IAEEL,SAFF,GAIIG,KAJJ,CAEEH,SAFF;EAAA,2BAIIG,KAJJ,CAGEG,aAHF;EAAA,IAGEA,aAHF,qCAGkB,KAHlB;;EAKA,sBAAkCpB,KAAK,CAACqB,QAAN,CAAe,IAAf,CAAlC;EAAA;EAAA,IAAOC,SAAP;EAAA,IAAkBC,YAAlB,uBANuE,CAOvE;;;EACA,IAAMC,SAAS,GAAGhB,UAAU,EAAE,aAAaR,KAAK,CAACyB,cAAN,CAAqBN,QAArB,IAAiCA,QAAQ,CAACD,GAA1C,GAAgD,IAA/D,EAAqEA,GAArE,CAA5B;EACAZ,iBAAiB,CAAC,YAAM;IACtB,IAAI,CAACc,aAAL,EAAoB;MAClBG,YAAY,CAACV,YAAY,CAACC,SAAD,CAAZ,IAA2BY,QAAQ,CAACC,IAArC,CAAZ;IACD;EACF,CAJgB,EAId,CAACb,SAAD,EAAYM,aAAZ,CAJc,CAAjB;EAKAd,iBAAiB,CAAC,YAAM;IACtB,IAAIgB,SAAS,IAAI,CAACF,aAAlB,EAAiC;MAC/BV,MAAM,CAACQ,GAAD,EAAMI,SAAN,CAAN;MACA,OAAO,YAAM;QACXZ,MAAM,CAACQ,GAAD,EAAM,IAAN,CAAN;MACD,CAFD;IAGD;;IACD,OAAOU,SAAP;EACD,CARgB,EAQd,CAACV,GAAD,EAAMI,SAAN,EAAiBF,aAAjB,CARc,CAAjB;;EASA,IAAIA,aAAJ,EAAmB;IACjB,KAAK,aAAapB,KAAK,CAACyB,cAAN,CAAqBN,QAArB,CAAlB,EAAkD;MAChD,IAAMU,QAAQ,GAAG;QACfX,GAAG,EAAEM;MADU,CAAjB;MAGA,OAAO,aAAaxB,KAAK,CAAC8B,YAAN,CAAmBX,QAAnB,EAA6BU,QAA7B,CAApB;IACD;;IACD,OAAO,aAAajB,IAAI,CAACZ,KAAK,CAAC+B,QAAP,EAAiB;MACvCZ,QAAQ,EAAEA;IAD6B,CAAjB,CAAxB;EAGD;;EACD,OAAO,aAAaP,IAAI,CAACZ,KAAK,CAAC+B,QAAP,EAAiB;IACvCZ,QAAQ,EAAEG,SAAS,GAAG,aAAarB,QAAQ,CAAC+B,YAAT,CAAsBb,QAAtB,EAAgCG,SAAhC,CAAhB,GAA6DA;EADzC,CAAjB,CAAxB;AAGD,CArC2B,CAA5B;AAsCAW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCpB,MAAM,CAACqB;AAAU;AAAjB,EAA0C;EAChF;EACA;EACA;EACA;;EACA;AACF;AACA;EACEjB,QAAQ,EAAEjB,SAAS,CAACmC,IAR4D;;EAShF;AACF;AACA;AACA;AACA;AACA;AACA;EACEvB,SAAS,EAAEZ;EAAU;EAAD,CAAuCoC,SAAhD,CAA0D,CAAClC,eAAD,EAAkBF,SAAS,CAACqC,IAA5B,CAA1D,CAhBqE;;EAiBhF;AACF;AACA;AACA;EACEnB,aAAa,EAAElB,SAAS,CAACsC;AArBuD,CAAlF,GAsBI,KAAK,CAtBT;;AAuBA,IAAIP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzC;EACApB,MAAM,CAAC,cAAc,EAAf,CAAN,GAA2BZ,SAAS,CAACY,MAAM,CAACqB,SAAR,CAApC;AACD;;AACD,eAAerB,MAAf"},"metadata":{},"sourceType":"module"}